name: Streamlit App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11']  # Python 3.11로 변경
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # pip 캐시 추가로 빌드 속도 향상
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 기본 의존성 설치
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # 테스트 및 개발 도구 설치
        pip install pytest pytest-cov flake8
    
    - name: Run tests with secrets
      env:
        OC_CODE: ${{ secrets.OC_CODE }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # tests 디렉토리가 있는지 확인
        if [ -d "tests" ]; then
          echo "Running pytest..."
          python -m pytest tests/ -v --cov=./ --cov-report=xml
        else
          echo "No tests directory found. Creating sample test..."
          # 테스트 디렉토리가 없으면 기본 테스트 생성
          mkdir -p tests
          cat > tests/test_sample.py << 'EOF'
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_import():
    """앱이 정상적으로 import 되는지 확인"""
    try:
        import streamlit as st
        assert st is not None
        print("✅ Streamlit import successful")
    except ImportError:
        assert False, "Streamlit import failed"

def test_environment_variables():
    """환경 변수가 설정되어 있는지 확인"""
    oc_code = os.getenv('OC_CODE')
    api_key = os.getenv('OPENAI_API_KEY')
    print(f"✅ OC_CODE present: {bool(oc_code)}")
    print(f"✅ OPENAI_API_KEY present: {bool(api_key)}")
    assert True  # 환경변수 존재 여부만 확인
EOF
          python -m pytest tests/ -v
        fi
    
    - name: Check code quality
      run: |
        echo "Running code quality checks..."
        # E9: Python syntax errors
        # F63: Wrong use of operators
        # F7: Syntax error or undefined names
        # F82: Undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
          --exclude=.git,__pycache__,venv,env,.venv \
          --max-line-length=120
    
    # 테스트 결과 업로드 (선택사항)
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml
        retention-days: 5

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Streamlit Cloud
      env:
        STREAMLIT_API_TOKEN: ${{ secrets.STREAMLIT_API_TOKEN }}
      run: |
        # Streamlit Cloud 배포
        if [ -z "$STREAMLIT_API_TOKEN" ]; then
          echo "⚠️  STREAMLIT_API_TOKEN not set. Skipping deployment."
          echo "ℹ️  Please add STREAMLIT_API_TOKEN to GitHub Secrets for automatic deployment."
        else
          echo "🚀 Deploying to Streamlit Cloud..."
          # Streamlit Cloud는 GitHub 연동으로 자동 배포되므로
          # 추가 작업이 필요하면 여기에 구현
          echo "✅ Deployment triggered via GitHub integration"
        fi
